-- ================================
-- SCHEMA INIT SCRIPT FOR ORACLE BANK DATA PROJECT (FIXED)
-- ================================

-- DROP cũ để tránh lỗi khi chạy lại nhiều lần
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE fact_price_monthly CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE fact_price_daily CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE dim_date CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE dim_symbol CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE stg_historical_price CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE outbox_events CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE fact_tick_agg CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE fact_settlement CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE orders CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

-- ========== STAGING ==========
CREATE TABLE stg_historical_price (
    symbol       VARCHAR2(20),
    trade_date   DATE,
    open_price   NUMBER(10,2),
    high_price   NUMBER(10,2),
    low_price    NUMBER(10,2),
    close_price  NUMBER(10,2),
    adj_close    NUMBER(10,2),
    volume       NUMBER
);

-- ========== DIMENSIONS ==========
CREATE TABLE dim_symbol (
    symbol_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    symbol       VARCHAR2(20) UNIQUE,
    company_name VARCHAR2(200)
);

CREATE TABLE dim_date (
    date_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    trade_date   DATE UNIQUE,
    year         NUMBER,
    quarter      NUMBER,
    month        NUMBER,
    day          NUMBER
);

-- ========== FACTS ==========
CREATE TABLE fact_price_daily (
    fact_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    symbol_id    NUMBER,
    date_id      NUMBER,
    open_price   NUMBER(10,2),
    high_price   NUMBER(10,2),
    low_price    NUMBER(10,2),
    close_price  NUMBER(10,2),
    adj_close    NUMBER(10,2),
    volume       NUMBER,
    CONSTRAINT fk_daily_symbol FOREIGN KEY (symbol_id) REFERENCES dim_symbol(symbol_id),
    CONSTRAINT fk_daily_date   FOREIGN KEY (date_id)   REFERENCES dim_date(date_id)
);

CREATE TABLE fact_tick_agg (
    symbol       VARCHAR2(20),
    minute_ts    TIMESTAMP,
    open_price   NUMBER(10,2),
    high_price   NUMBER(10,2),
    low_price    NUMBER(10,2),
    close_price  NUMBER(10,2),
    volume       NUMBER,
    tick_count   NUMBER,
    CONSTRAINT pk_tick PRIMARY KEY (symbol, minute_ts)
);

CREATE TABLE fact_price_monthly (
    fact_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    symbol_id    NUMBER,
    year         NUMBER,
    month        NUMBER,
    avg_open     NUMBER(10,2),
    avg_close    NUMBER(10,2),
    avg_high     NUMBER(10,2),
    avg_low      NUMBER(10,2),
    total_volume NUMBER,
    CONSTRAINT fk_monthly_symbol FOREIGN KEY (symbol_id) REFERENCES dim_symbol(symbol_id)
);

-- ========== ORDERS ==========
CREATE TABLE orders (
    order_id     NUMBER PRIMARY KEY,
    customer_id  NUMBER,
    symbol       VARCHAR2(20),
    side         VARCHAR2(4),
    quantity     NUMBER,
    price        NUMBER(10,2),
    status       VARCHAR2(20),
    created_ts   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ========== OUTBOX EVENTS (cho Kafka) ==========
CREATE TABLE outbox_events (
    event_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_type   VARCHAR2(50),
    payload      CLOB,
    created_ts   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    dispatched   CHAR(1) DEFAULT 'N'
);

-- ========== SETTLEMENT ==========
CREATE TABLE fact_settlement (
    settlement_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    settlement_date DATE,
    status        VARCHAR2(20),
    created_ts    TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ================================
-- PACKAGE SETTLEMENT
-- ================================
CREATE OR REPLACE PACKAGE pkg_settlement AS
    PROCEDURE run_daily_settlement(p_date IN DATE);
END pkg_settlement;
/

CREATE OR REPLACE PACKAGE BODY pkg_settlement AS
    PROCEDURE run_daily_settlement(p_date IN DATE) IS
    BEGIN
        INSERT INTO fact_settlement(settlement_date, status)
        VALUES(p_date, 'COMPLETED');
        DBMS_OUTPUT.PUT_LINE('Settlement done for ' || TO_CHAR(p_date,'YYYY-MM-DD'));
    END run_daily_settlement;
END pkg_settlement;
/

-- ================================
-- PACKAGE ORDER MANAGEMENT
-- ================================
CREATE OR REPLACE PACKAGE PKG_ORDER_MANAGEMENT AS
    PROCEDURE PLACE_ORDER(
        p_customer_id IN NUMBER,
        p_symbol IN VARCHAR2,
        p_side IN VARCHAR2,
        p_quantity IN NUMBER,
        p_price IN NUMBER,
        p_order_id OUT NUMBER
    );
END PKG_ORDER_MANAGEMENT;
/

CREATE OR REPLACE PACKAGE BODY PKG_ORDER_MANAGEMENT AS
    PROCEDURE PLACE_ORDER(
        p_customer_id IN NUMBER,
        p_symbol IN VARCHAR2,
        p_side IN VARCHAR2,
        p_quantity IN NUMBER,
        p_price IN NUMBER,
        p_order_id OUT NUMBER
    ) IS
    BEGIN
        -- Tạo order_id
        SELECT NVL(MAX(order_id),0)+1 INTO p_order_id FROM orders;

        -- Insert vào orders
        INSERT INTO orders(order_id, customer_id, symbol, side, quantity, price, status, created_ts)
        VALUES(p_order_id, p_customer_id, p_symbol, p_side, p_quantity, p_price, 'PENDING', SYSTIMESTAMP);

        -- Insert vào outbox_events
        INSERT INTO outbox_events(event_type, payload, created_ts)
        VALUES(
            'ORDER_CREATED',
            '{"order_id": ' || p_order_id || ', "customer_id": ' || p_customer_id ||
            ', "symbol": "' || p_symbol || '", "side": "' || p_side ||
            '", "quantity": ' || p_quantity || ', "price": ' || p_price || '}',
            SYSTIMESTAMP
        );

        -- Bỏ COMMIT/ROLLBACK, commit từ client Python
    END PLACE_ORDER;
END PKG_ORDER_MANAGEMENT;
/
